---
name: Add News

on:
  issue_comment:
    types:
      - created
    branches:
      - ${{ github.head_ref }}
      

jobs:
  check:
    if: >-
      !github.event.repository.fork && (
        github.event.comment.body == 'please add news'
        || github.event_name == 'pull_request_target'
      )

    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >>$GITHUB_OUTPUT
        id: extract_branch

      - name: Print Stuff
        run: |
        uses: actions/checkout@v2
          PR_OWNER_USERNAME=${{ github.actor }}
          PR_OWNER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/users/$PR_OWNER_USERNAME" | jq -r '.email')
          PR_BRANCH=${{ steps.extract_branch.outputs.branch }}
          echo PR owner username is $PR_OWNER_USERNAME
          echo PR owner email is $PR_OWNER_EMAIL
          echo PR branch is $PR_BRANCH

      - name: Create File
        uses: 1arp/create-a-file-action@0.2
        with:
          branch: ${{ github.head_ref }}
          path: 'news'
          file: 'news.txt'
          content: |
            ### Enhancements
            * <news item>
            ### Bug fixes
            * <news item>
            ### Deprecations
            * <news item>
            ### Docs
            * <news item>
            ### Other
            * <news item>

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Commit File
        if: steps.create_file.outputs
        run: |
          PR_OWNER_USERNAME=${{ github.actor }}
          PR_OWNER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/users/$PR_OWNER_USERNAME" | jq -r '.email')
          git config --local user.email $PR_OWNER_EMAIL
          git config --local user.name $PR_OWNER_USERNAME
          git add .
          git commit -m "Add news snippet"
          git push
        env:
          github_token: ${{ secrets.GITHUB_TOKEN }}

#           PR_OWNER_USERNAME=${{ github.actor }}
#           PR_OWNER_EMAIL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/users/$PR_OWNER_USERNAME" | jq -r '.email')
#           git push origin ${{ github.head_ref }}
